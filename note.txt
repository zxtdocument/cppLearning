C++ Primer Plus (five version)

数组和指针
char a[3][10];
当计算a[i][j]的时候，编译器会把它变为*(*(a+i)+j)
但是， a并不是一个二级指针，a仍然是一个一级指针， 指向数组的第一个元素。数组在内存中
是按行优先存储的。
char**p=(char**)a;//invalid
char (*p)[10];//声明了一个数组指针。p指向一个char[10]
因此p=a;就是合法的。p+1指针移动10char。指针加减所移动的类型都是以指针的类型为依据。
而char* p[10];则是定义了一个指针数组。含有十个数据， 每个都是一个char*的指针。


Chapter 3
  climits 定义了很多符号常量，如下：
  CHAR_BIT  char bit number
  CHAR_MAX  char max number
  INT_MAX   int max number

  const int MAX=32;
  const 比define好，有明确的类型和c++作用域，同时还能描述复杂结构

  宽字符
  wchar_t a=L'P';
  wout<<L"tall";

  cin.getline()/cin.get() 每次读取一行。getline丢弃换行符;get将换行符保留在输入
  序列里， 下次读取， 第一个将是换行符。

  enum 都是整数。
  enum spectrum {red, oragne, yellow, green, blue, violet, indigo, ultraviolet}
  enum bits{one=1, two=2, three=9};
  default value:0,1,2,3,.....
  {
    spectrum a;
    a=red;//valid
    a=(spectrum)7;//vaild
    a=1;//invalid
    a=red + yellow;//invaild
    a=(spectrum)((int)red + (int)yellow);//vaild
  }


  const char * bird="wren";//const 可以访问wren，但不能更改

  const 作用于指针， 指针指向的内容不可变， 指针本身可变。
  const int* p=&num;
  p=&num2;//valid
  *p=num2;//invalid

  将非const值赋给const是合法的， 反之是非法的。
  cannot convert from "const int*" to "int*"
  const int num1=1;
  int num2=2;
  //int *p=&num1;//invalid
  const int *p=&num1;//valid
  const int *p=&num2;//valid
  num2=9;//valid
  *p=2;//invalid
  赋值是否合法，只有看左右两边的类型即可。(注：const int是可以赋值给int的，因为
  是值传递)
  尽量在值不变的变量前加const语句。

  const变量只能在定义的时候赋值， 期间不能改。

  const成员函数：
  const Stock land=Stock("haha");
  land.show();//error, 因为无法保证show不改变land的内容。
  因此， 要把show声明为const成员函数， 如下：
  void stock::show() const 
  只要方法不改变类的内容， 就应声明为const


Chapter 8 函数
  内联函数：用相应的函数代码替换函数调用。
  在函数声明和定义前面都要加上inline

  引用变量：变量的别名。在声明引用时就要初始化。中途不能赋值。
  int a=1; int & b=a;
  
  函数的列表参数又称为函数的特征标。 

  函数模板(声明和定义前都要加template...)
  template <class T>//或者template <typename T>
  T void(const T & a, const T &b);

  给定函数名， 有非模板函数， 模板函数和显示具体化函数以及它们的重载版本。
  编译器在选择原型时， 非模板版本优于显示具体化和模板函数， 显示具体化函数
  优于模板函数。

  void swap(int &, int&);//非模板函数
 
  template <class T>
  T swap(T &, T &);//模板函数

  template <> swap<job>(job &, job &);//显示具体化函数

  例子：template.cpp


Chapter 9 内存模型和名称空间
  防止文件多次包含：
  #ifndef AA
  #define AA
    //place include file contents here
  #endif

  对于每个非内联的函数， 文件中只能包含一个定义。 所以cpp文件不能多次包含。

  名称空间
  提供一个声明名称的区域。注意，是声明区域名称空间可以是全局的， 也可以位于另一个名称空间中， 但不能位于代码块中。
  除了用户定义的名称空间外， 还有一个默认的全局名称空间。它对应于文件级的声明区域。 全局变量都是位于全局名称空间中。

  使用名称空间的内容：
  Jack::pail=11.1;
  全局名称空间：
  ::fetch

  namespace Jack {
    double fetch;
    struct Hill {};
  }
  char fetch;
  int main(){
    using Jack::fetch; //put fetch into local namespace
    double fetch;//Error!!! Already have a local fetch
    cin>>fetch;//read a value into Jack::fetch
    cin>>::fetch;//read a value into global fetch
  }

Chapter 11 使用类
  算符重载
  class Time{
    private:
        int hours,minutes;
    public:
        Time();
        ~Time();
        Time operator+(Time & t） const;
  };
  重载限制：
  1. 重载后的算符至少有一个是用户自己定义的类型，防止用户为标准类型重载算符。
  2. 操作符与原来的操作句法相同。
  3. 不能定义新的操作符号。例如不能定义operator**()为求幂运算。
  4. 有些操作符不能重载；

  友元简介：
  友元函数/友元类/友元成员函数
  友元函数常常用来重载二元操作符。
  如：
  A=B*3;//convert to A=B.operator*(3);但是没有交换性;
  A=3*B//invalid!
  所以就需要友元函数。友元函数不是类的成员函数， 但可以访问类的私有成员。
  原型如下：
  在类声明中
  friend Time operator*(double m, const Time &t);
  函数定义：（不要再用friend）
  Time operator*(double m, const Time & t)
      Time result;
      ...
      return result;
  }
  操作符左侧对象对应第一个参数， 右侧对象对应第二个参数。
  因此， 要实现以上乘法的交换行，就要定义两个操作函数。

  重载<<算符
  第一种版本：
   cout<<"haha";//cout是一个ostream对象。因此可以通过如下友元函数重载
  void operator<<(ostream &os, coust Time &t){
      os<<t.hours<<":"<<t.mins;
  }
  这就可以使用cout<<t;来输出Time对象。
  但这种版本无法实现：cout<<t1<<t2;这种操作
  第二种版本，同样是友元函数, 可以实现上述操作。
  ostream & operator<<(ostream &os, const Time &t){
    os<<t.hours<<":"<<t.mins;
    return os;
  }

  类的自动转换和强制类型转换
  接受一个参数的类的构造函数， 为将类型与该参数相同的值的转换提供了蓝图。
  只接受一个参数的构造函数才能作为转换函数。
  如有如下构造函数：
  Stonewt (double lbs);
  则：
  Stonewt myCat;
  myCat=19.6;
  程序将使用如上的构造函数生成一个临时对象， 然后采用逐成员赋值的方法，将
  临时对象赋予myCat。 
  可以用explicit关键字关闭这种自动特性。
  
  转换函数：将Stonewt转换为double
  注意：
  1.转换函数必须是类的方法; 
  2.转换函数不能指定返回类型。
  3.转换函数不能有参数。
  operator double() const;//类中的声明
  实现：
  Stonewt::double() const{
      return double(pounds);
  }
  

Chapter 12 类和动态内存分配
  类静态成员：所有对象共享一个静态成员。初始化不能写在成员函数内。
  如：
  int Time::a=0;
  Time::Time(){}
  .....

  C++隐式成员函数：
    默认构造函数/复制构造函数/赋值操作符/默认析构函数/地址操作符

  默认构造函数
    默认如下构造函数：Klunk::Klunk(){}

  复制构造函数
    将一个对象复制到新创建的对象中。主要用于初始化， 而不是常规的赋值。
    主要用在：
    1. 创建一个新对象，并初始化为一个同类现有对象。
    2. 函数按值传递对象或者返回对象时。
    3. 编译生成临时对象。

    默认的复制构造函数，就是对成员逐一进行值拷贝。
    显示复制构造函数如下：
    Time::Time(const Time & t){
        hours=t.hours;
        minus=t.minus;
    }
    实现深拷贝，必须要显示复制构造函数。

  赋值操作符
    将一个对象赋给另一个对象时。不要将赋值和初始化混淆。若语句创建新对象， 则使用初始化；若修改已有的对象，是赋值。

  类的静态成员函数， 不能通过对象调用， 要用类名和作用域解析操作符调用。
  若返回对象是被调用函数中到局部变量， 则不应安引用方式返回。  


Chapter 13 类继承
  共有派生： 派生类不能直接访问基类的私有成员，必须通过基类的方法访问。
  派生类的构造函数：基类的对象首先被构造；派生类构造函数应通过成员初始化列表信息传递给
  基类构造函数；派生类的构造函数初始化派生类的新增成员。
  成员初始化列表：
  child::child(int i):base(i), rating(j){...}//base是基类构造函数，rating是基类的成员函数。

  派生类和基类的特殊关系
    基类指针可以在不进行显示类型转换的情况下指向派生类；
    基类引用可以在不显示类型转换的情况下引用派生类。反之则不行。
    
    在派生类中重新定义基类方法：
      没用virtual修饰：程序根据引用类型和指针类型选择方法；
      若有virtual修饰：程序根据引用或指针的对象类型选择方法。
      在基类中用virtual修饰，在派生类中最好也加上virtual修饰。
      注意：在派生类中若要重新定义基类的方法， 通常应将基类的方法声明为虚的。这样将根据对象类型，
            而不是指针或引用的类型选择方法。
            为基类声明虚的析构函数也是一种惯例。如果析构函数不是虚的，则将只调用对应于指针类型的析构
            函数，如果指针是基类指针，指向派生类，则其调用的将是基类的析构函数，存在问题。
      virtual 关键只用于类声明， 不出现在方法定义中。

  静态联编（static binding）： 在编译过程中进行的联编。-》非虚方法
  动态联编:在运行时选择正确的虚函数代码。-》虚方法

  派生类中重新定义的基类方法并不是重载。而是直接覆盖基类的声明，隐藏基类的方法，不管参数特征标如何。

  继承和动态内存分配：//派生类中如何处理基类的相关函数
    主要包括显示析构函数，复制构造函数和赋值操作符。
    1. 派生类的析构函数会自动调用基类的析构函数。故其职责是对派生类构造函数执行的操作进行清理。
    2. 派生类的复制构造函数要显示调用基类的复制构造函数。
       child::child(const child & c):base(c){...}
    3. 赋值操作符可以通过显示调用基类赋值操作符。
       child & child::operator=(const child & c){
           if(this==&hs)return *this;
           base::operator=(c);
       }

 Chapter 14 C++代码重用
  包含对象成员的类
    类的对象成员可以放在初始化列表里进行初始化。而初始化的顺序取决于在类中声明的顺序，而不是初始化列表中的顺序。
    
  类模板
    例子：
    //声明和定义类模板
    template <class Type>//或者template <typename Type>
    class Stack{
        private:
            int top;
            .....
        public:
            Stack();
            .....
            bool isfull();
    };

    template <class Type>
    Stack<Type>::Stack(){...}

    template <class Type>
    bool Stack<Type>::isfull(){...}

    //使用类模板
    Stack<int> test1;

    数组模板范例和非类型参数
      例子：
      template <class T, int n>
      class ArrayTP{
        private:
          T ar[n];
        public:
          ArrayTP(){};
          explicit ArrayTP(const T & v);
          virtual T & operator[](int i);
      }; 

      template <class T, int n>
      ArrayTP<T, n>::ArrayTP(const T &v){...}

      T & ArrayTP<T,n>::operator[](int i){...}

      以上例子中， int n就成为非类型参数。在使用时：ArrayTP<double,10> a1;就会创建一个对象，编译器
      会用double替换T，用10替换n。表达式参数可以是整型，枚举， 引用和指针。在实例化模板的时候，用的
      值必须是常量表达式。

    递归使用模板
      ArrayTP<ArrayTP<int,5>,10> twodes;

    使用多类型参数
      template <class T1, class T2>
      class Pair{
          private:
              T1 a;
              T2 b;
           ....
      }

    模板的具体化
      1.隐式实例化：声明一个或多个对象时，指出所需类型。ArrayTP<int,100> stuff;
      2.显式实例化：
      3.显示具体化：模板特定类型的定义。
        template <class T>
        class SortedArray{...};

        template <> class SortedArray<char *>{...};//针对char*的具体化。
      4.部分具体化
          部分限制模板到通用性。可以给类型参数之一提供具体类型。
          //general template
          template <class T1, class T2>
          class Pair{...};
          //specialization with T2 set to int
          template <class T1> class Pair<T1, int> {...};
          如果有多个模板可以选择， 编译器将使用具体化程度最高的模板。
          
          也可以为指针提供特殊版本来部分具体化现有模板。
          template <class T> //general version
          class Feed{...};
          template <class T*> //pointer partial specialization
          class Feed{...};
          如果提供的类型不是指针，则编译器将使用通用版本;如果提供的是指针，则编译器将使用
          指针具体化版本。
          Feed<char> fb1;//general
          Feed<char *> fb2;//pointer partial specialization

    成员模板
         模板可以用作结构、类或模板类的成员。
         例子：
         template <typename T>
         class beta{
           private:
                               
             template <typename V>//nested template class member
             class hold{
               private:
                 V val;
               public:
                 .....
             };    
             hold <T> q;
             hold <int> n;

           public:
              template<typename U> //template method
              U blab(U u, T,t){}
            .....

         };

    将模板用作参数
      模板可以包含本身就是模板的参数。
      例子：
      template <template <typename T> class Thing>//line1
      class Crab{
        private:
          Thing<int> s1;
          Thing<double> s2;
        public:
          Crab(){}
          ....
      };
      //以上就是一个模板参数的例子。其中template <typename T> class 是模板参数的类型， Thing是模板参数
      //在具体实例化中，会把一个模板传进去而代替Thing. 传进的模板要符合其模板参数类型的定义。

      template <typename T>
      class king{...};

      int main(){
          Crab <king> a;//king是一个符合line1处类型声明的模板。
      }


    模板类和友元
       1.模板类的非模板友元
         template <class T>
         class A{
             friend void fun1();//为模板所有实例化的友元。
             friend void fun2(A &);//invalid。因为A为模板类，没有特定的具体化。要写成如下形式：
             friend void fun2(A<T> &);
         };

       2.模板类的约束模板友元函数,即友元类型取决于实例化的类型。
         在类定义前声明每个模板函数
         template <typename T> void counts();  
         template <typename T> void report(T &);
         然后在模板类声明中：
         template <typename TT>
         class A{
           ...
             friend void fun1<TT>();
             friend void fun2<A<TT>&>(A<TT> &);
         };

       3.模板类的非约束模板友元函数
         
         
         
                      


